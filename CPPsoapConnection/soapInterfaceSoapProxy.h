/* soapInterfaceSoapProxy.h
Generated by gSOAP 2.8.23 from mkws.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapInterfaceSoapProxy_H
#define soapInterfaceSoapProxy_H
#include "soapH.h"

class SOAP_CMAC InterfaceSoapProxy
{
public:
	struct soap *soap;
	bool soap_own;
	/// Endpoint URL of service 'InterfaceSoapProxy' (change as needed)
	const char *soap_endpoint;
	/// Variables globally declared in mkws.h (non-static)
	/// Constructor
	InterfaceSoapProxy();
	/// Constructor to use/share an engine state
	InterfaceSoapProxy(struct soap*);
	/// Constructor with endpoint URL
	InterfaceSoapProxy(const char *url);
	/// Constructor with engine input+output mode control
	InterfaceSoapProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	InterfaceSoapProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	InterfaceSoapProxy(soap_mode imode, soap_mode omode);
	/// Destructor deletes non-shared engine context only (use destroy() to delete deserialized data)
	virtual	~InterfaceSoapProxy();
	/// Initializer used by constructors
	virtual	void InterfaceSoapProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'HelloAdd' (returns error code or SOAP_OK)
	virtual	int HelloAdd(_ns1__HelloAdd *ns1__HelloAdd, _ns1__HelloAddResponse &ns1__HelloAddResponse) { return this->HelloAdd(NULL, NULL, ns1__HelloAdd, ns1__HelloAddResponse); }
	virtual	int HelloAdd(const char *endpoint, const char *soap_action, _ns1__HelloAdd *ns1__HelloAdd, _ns1__HelloAddResponse &ns1__HelloAddResponse);

	/// Web service operation 'HelloWorld' (returns error code or SOAP_OK)
	virtual	int HelloWorld(_ns1__HelloWorld *ns1__HelloWorld, _ns1__HelloWorldResponse &ns1__HelloWorldResponse) { return this->HelloWorld(NULL, NULL, ns1__HelloWorld, ns1__HelloWorldResponse); }
	virtual	int HelloWorld(const char *endpoint, const char *soap_action, _ns1__HelloWorld *ns1__HelloWorld, _ns1__HelloWorldResponse &ns1__HelloWorldResponse);

	/// Web service operation 'HelloMike' (returns error code or SOAP_OK)
	virtual	int HelloMike(_ns1__HelloMike *ns1__HelloMike, _ns1__HelloMikeResponse &ns1__HelloMikeResponse) { return this->HelloMike(NULL, NULL, ns1__HelloMike, ns1__HelloMikeResponse); }
	virtual	int HelloMike(const char *endpoint, const char *soap_action, _ns1__HelloMike *ns1__HelloMike, _ns1__HelloMikeResponse &ns1__HelloMikeResponse);

	/// Web service operation 'AddLog' (returns error code or SOAP_OK)
	virtual	int AddLog(_ns1__AddLog *ns1__AddLog, _ns1__AddLogResponse &ns1__AddLogResponse) { return this->AddLog(NULL, NULL, ns1__AddLog, ns1__AddLogResponse); }
	virtual	int AddLog(const char *endpoint, const char *soap_action, _ns1__AddLog *ns1__AddLog, _ns1__AddLogResponse &ns1__AddLogResponse);

	/// Web service operation 'HelloAdd' (returns error code or SOAP_OK)
	virtual	int HelloAdd_(_ns1__HelloAdd *ns1__HelloAdd, _ns1__HelloAddResponse &ns1__HelloAddResponse) { return this->HelloAdd_(NULL, NULL, ns1__HelloAdd, ns1__HelloAddResponse); }
	virtual	int HelloAdd_(const char *endpoint, const char *soap_action, _ns1__HelloAdd *ns1__HelloAdd, _ns1__HelloAddResponse &ns1__HelloAddResponse);

	/// Web service operation 'HelloWorld' (returns error code or SOAP_OK)
	virtual	int HelloWorld_(_ns1__HelloWorld *ns1__HelloWorld, _ns1__HelloWorldResponse &ns1__HelloWorldResponse) { return this->HelloWorld_(NULL, NULL, ns1__HelloWorld, ns1__HelloWorldResponse); }
	virtual	int HelloWorld_(const char *endpoint, const char *soap_action, _ns1__HelloWorld *ns1__HelloWorld, _ns1__HelloWorldResponse &ns1__HelloWorldResponse);

	/// Web service operation 'HelloMike' (returns error code or SOAP_OK)
	virtual	int HelloMike_(_ns1__HelloMike *ns1__HelloMike, _ns1__HelloMikeResponse &ns1__HelloMikeResponse) { return this->HelloMike_(NULL, NULL, ns1__HelloMike, ns1__HelloMikeResponse); }
	virtual	int HelloMike_(const char *endpoint, const char *soap_action, _ns1__HelloMike *ns1__HelloMike, _ns1__HelloMikeResponse &ns1__HelloMikeResponse);

	/// Web service operation 'AddLog' (returns error code or SOAP_OK)
	virtual	int AddLog_(_ns1__AddLog *ns1__AddLog, _ns1__AddLogResponse &ns1__AddLogResponse) { return this->AddLog_(NULL, NULL, ns1__AddLog, ns1__AddLogResponse); }
	virtual	int AddLog_(const char *endpoint, const char *soap_action, _ns1__AddLog *ns1__AddLog, _ns1__AddLogResponse &ns1__AddLogResponse);
};
#endif
